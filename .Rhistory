read.spss
read.spss(/Users/bhuvanshankar/Dropbox/Academics/Old/Fall\ 2012/BUAD898/Dow/Survey/Versions/November/Dow.sav)
read.spss(/Users/bhuvanshankar/Dropbox/Academics/Old/Fall\ 2012/BUAD898/Dow/Survey/Versions/November/Dow.sav, use.value.labels = TRUE)
install.packages("rPython")
myFamily
myFamily[0]
myFamily[0,1]
myFamily[0,0]
myFamily[1,0]
package
rPython
str(myFamily)
summary(myFamily)
package.rPython
open
help
library(rPython)
print "Hello World"
dir
helo
help
quit()
install.packages("swirl")
library("swirl")
swirl()
data("kidney", pacake="survival")
data("kidney", package="survival")
help
hw1_data = read.csv("hw1_data.csv")
x <- subset(hw1_data, is.>31(Ozone), select = c(Ozone))
x
x <- subset(hw1_data, Ozone > 31 & !is.na(Ozone), select = c(Ozone))
hw1_data = read.csv("hw1_data.csv")
test2<-subset(airquality, Temp > 80 & !is.na(Ozone), select = c(Ozone, Temp))
test2
test2<-subset(airquality, Temp > 91 & !is.na(Ozone), select = c(Ozone, Temp))
test2
test2<-subset(airquality, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Ozone, Temp))
test2
mean(solar.r)
test2
test2<-subset(airquality, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Ozone, Temp, Solar.R))
test2
mean(Solar.R)
mean(Solar.R.test2)
mean(test2)
mean(test2,3)
test2
head(test2)
test2
hw1_data = read.csv("hw1_data.csv")
test2<-subset(airquality, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Solar.R))
test2
mean(test2)
mean(test2L)
mean(test2, :2)
mean(test2,)
mean(test2,)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
hw1_data = read.csv("hw1_data.csv")
test2<-subset(airquality, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Solar.R))
mean(test2,)
mean(data, na.rm=TRUE)
hw1_data = read.csv("hw1_data.csv")
test2<-subset(airquality, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Solar.R))
mean(data, na.rm=TRUE)
mean(test2, na.rm=TRUE)
mean(test2, )
hw1_data = read.csv("hw1_data.csv")
y <- subset(hw1_data, Temp>90 & Ozone>31)
mean(y$Solar.R)
hw1_data = read.csv("hw1_data.csv")
#y <- subset(hw1_data, Temp>90 & Ozone>31)
#mean(y$Solar.R)
test2<-subset(airquality, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Solar.R))
mean(test2$Solar.R)
hw1_data = read.csv("hw1_data.csv")
test2<-subset(solarr, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Solar.R))
mean(test2$Solar.R)
hw1_data = read.csv("hw1_data.csv")
test2<-subset(airquality, Temp > 90 & !is.na(Ozone) & Ozone > 31, select = c(Solar.R))
mean(test2$Solar.R)
#Mean of Temp when month is 6
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month=6, select=c(Temp))
month
month <- subset(airquality, Month=6, select=c(Month, Temp))
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month=6, select=c(Month, Temp))
month
month <- subset(airquality, Month is.6, select=c(Month, Temp))
month <- subset(airquality, Month.is 6, select=c(Month, Temp))
month <- subset(airquality, Month==6, select=c(Month, Temp))
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==6, select=c(Month, Temp))
month
mean(month$Temp)
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==5, select=c(Month, Temp))
month
max(month$Temp)
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==5, select=c(Month, Temp))
max(month$Temp)
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==5, select=c(Month, Temp))
max(month$Temp)
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==5, select=c(Month, Temp))
max(month$Temp)
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==5, select=c(Month, Ozone))
max(month$Ozone)
month
month <- subset(airquality, Month==5, select=c(Month, Ozone.!na))
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==5 & Ozone!is.na(Ozone), select=c(Month, Ozone))
month
hw1_data = read.csv("hw1_data.csv")
month <- subset(airquality, Month==5 & !is.na(Ozone), select=c(Month, Ozone))
month
max(month)
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
library(swirl)
swirl()
swirl()
swirl()
install_from_swirl("R Programming")
swirl()
install_course_zip("/Users/bhuvanshankar/Downloads/swirl_courses-master.zip", multi-TRUE, which_course="R Programming")
install_course_zip("/Users/bhuvanshankar/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?rPython
library(swirl)
ls()
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersions("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cram, -time)
select(cran, -time)
select(cran, -5:20)
select(cran, X:size)
-5:20
(5:20)
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version=<"3.0.2", country=="IN")
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country == "US" | country =="IN")
filter(cran, size>100500, r_os=="linux-gnu")
filter(cran, r_version.is.na(c(3,5,NA,10)))
filter(cran, r_version=is.na(c(3,5,NA,10)))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_verson.!is.na())
filter(cran, r_verson=!is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, arrange())
cran2 <- select(cran, arrange(size:ip_id))
cran2 <- select(cran, arrange(c(size:ip_id))
f/
cran2 <- select(cran, arrange(size), arrange(ip_id))
cran2 <- select(cran, arrange(size, ip_id))
cran2 <- select(cran, arrange(size:ip_id))
cran2 <- select(cran, arrange())
cran2 <- select(cran, arrange(.size), arrange(.ip_id))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(ip_id, package, size)
cran3<-select(cran ip_id, package, size)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size_gb+1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
swirl()
library(swirl)
Bhuvan
ls()
rm(list=ls())
quit()
unique(acs$AGEP)
source('~/.active-rstudio-document')
######## Question 1 ########
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
######## Question 2 ########
library(sqldf)
acs <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "acs.csv")
acs <- read.csv("acs.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
######## Question 3 ########
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
fUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
fUrl <- url(fUrl)
htmlCode <- readLines(fUrl)
close(fUrl)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", data.for)
data <- read.csv("data.for", header=T)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", data.for)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
data <- read.csv("data.for", header=T)
head(data)
View(data)
dim(data)
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
head(df)
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
dim(data)
head(data)
?read.fwf
dframe <- read.fwf("data")
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
#data <- read.csv("data.for", header=T)
dframe <- read.fwf("data")
data <- read.csv("data.for", header=T)
View(data)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
#data <- read.csv("data.for", header=T)
dframe <- read.fwf("data", widths = " ")
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
data <- read.csv("data.for", header=T)
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
df <- read.fwf(file="data.for", widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
df
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
df <- read.fwf(file="data.for", header = TRUE, widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
data <- read.csv("data.for", header=T)
df <- read.fwf(file="data.for", header = TRUE, widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
data <- read.csv("data.for", header=T)
df <- read.fwf(file="data.for", widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
dim(df)
head(df)
head(data)
sum(df[, 4])
View(cran3)
install.packages("googlePublicData")
install.packages("googleVis")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:googleVis", unload=TRUE)
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("Rserve")
source('~/Documents/git/CleaningGettingData/BaltimoreCamera.R')
View(CameraData)
source('~/Documents/git/CleaningGettingData/BaltimoreData/BaltimoreCamera.R')
View(CameraData)
source('~/Documents/git/CleaningGettingData/BaltimoreData/BaltimoreCamera.R')
View(CameraData)
autoplot(CameraData$Location.1)
library("ggplot2")
autoplot(CameraData$Location.1)
library("Deducer", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?deducer
deducer()
detach("package:Deducer", unload=TRUE)
library("maps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
us.cities("Baltimore")
library("maps")
maps.us.cities
usa
data(usaMapEnv)
install.packages(c("knitr", "mvtnorm", "sp"))
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
plot(displ, hwy, data=mpg)
plot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
?sapply
?qplot
mpg <- str(mpg)
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
tidy_app
maps.cities(x=Baltimore,"USA")
library(maps)
maps.cities(x=Baltimore,"USA")
library(maptools)
library(maps)
library(mapdata)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
map("CameraData","USA”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
?map
map("state","MD”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
map("usa","MD”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
map('state', 'Baltimore')
map('city', 'Baltimore')
map('state', 'Maryland')
?map
library(map)
map("county","baltimore”)
map("county","maryland”)
library(map)
map('state', 'Maryland')
map('county', 'Maryland')
map('county', 'baltimore')
summary(CameraData)
?map
CameraD
cameras <- read.csv("~/Documents/git/CleaningGettingData/BaltimoreData/cameras.csv")
View(cameras)
CameraD
df<- cameras
library(maps)
library(mapdata)
map("state","maryland”, xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302), col="gray90”, fill=TRUE)
map("state","maryland”, xlim=-76, ylim=39, col="gray90”, fill=TRUE)
map("state","maryland”, xlim=c(-76,-76), ylim=c(39,39), col="gray90”, fill=TRUE)
map('state','maryland', xlim=c(-76,-76), ylim=c(39,39), col="gray90”, fill=TRUE)
map('state','maryland'), xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302), col="gray90”, fill=TRUE)
map('state','Maryland'), xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302), col="gray90”, fill=TRUE)
data(ozone)
map("state", xlim = range(ozone$x), ylim = range(ozone$y))
text(ozone$x, ozone$y, ozone$median)
box()
if(require(mapproj)) {    # mapproj is used for  projection="polyconic"
# color US county map by 2009 unemployment rate
# match counties to map using FIPS county codes
# Based on J's solution to the "Choropleth Challenge"
# http://blog.revolutionanalytics.com/2009/11/choropleth-challenge-result.html
# load data
# unemp includes data for some counties not on the "lower 48 states" county
# map, such as those in Alaska, Hawaii, Puerto Rico, and some tiny Virginia
#  cities
data(unemp)
data(county.fips)
# define color buckets
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
# align data with map definitions by (partial) matching state,county
# names, which include multiple polygons for some counties
cnty.fips <- county.fips$fips[match(map("county", plot=FALSE)$names,
county.fips$polyname)]
colorsmatched <- unemp$colorBuckets [match(cnty.fips, unemp$fips)]
# draw map
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0,
lty = 0, projection = "polyconic")
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.2,
projection="polyconic")
title("unemployment by county, 2009")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
# Choropleth Challenge example, based on J's solution, see:
# http://blog.revolutionanalytics.com/2009/11/choropleth-challenge-result.html
# To see the faint county boundaries, use RGui menu:  File/SaveAs/PDF
}
map('state','maryland'), xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302), col="gray90”, fill=TRUE)
map('state','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302), col="gray90”, fill=TRUE)
map("state","maryland",)
map("state","maryland")
map("state","maryland")
map("county","maryland")
map("county","maryland", xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302))
map("state","maryland", xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302))
map("state","maryland", xlim=c(-76.53236586, -76.71024274), ylim=c(39.37049296, 39.19991302))
map("state","maryland", xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
library(maps)
library(mapdata)
cameras <- read.csv("~/Documents/git/CleaningGettingData/BaltimoreData/cameras.csv")
map("state","maryland", xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
map("state","maryland", xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296), col="gray90”, fill=TRUE)
)
map("state","maryland", xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296), col="gray90”, fill=TRUE))
map('state','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296), col="gray”, fill=TRUE)
map('country','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296), col="gray”, fill=TRUE)
map('usa','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296), col="gray”, fill=TRUE)
map('usa','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
map('usa','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
map('state','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
library(maps)
library(mapdata)
library(maptools)  #for shapefiles
library(scales)  #for transparency
cameras <- read.csv("~/Documents/git/CleaningGettingData/BaltimoreData/cameras.csv")
map('state','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
?map
map('state','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296), fill = TRUE)
map(xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296), fill = TRUE)
map(xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
map('state','maryland',  fill = TRUE)
source('~/.active-rstudio-document')
map('state','maryland', xlim=c(-76.53236586, -76.71024274), ylim=c(39.19991302, 39.37049296))
library(RgoogleMaps)
lat <- c(39.19991302, 39.37049296) #define our map's ylim
lon <- c(-76.53236586, -76.71024274) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
zoom <- 5  #zoom: 1 = furthest out (entire globe), larger numbers = closer in
terrmap <- GetMap(center=center, zoom=zoom, maptype= "roadmap", destfile = "roadmap") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
cameras <- read.csv("~/Document
install.packages("RgoogleMaps")
install.packages("RgoogleMaps")
library(RgoogleMaps)
lat <- c(39.19991302, 39.37049296) #define our map's ylim
lon <- c(-76.53236586, -76.71024274) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
zoom <- 5  #zoom: 1 = furthest out (entire globe), larger numbers = closer in
terrmap <- GetMap(center=center, zoom=zoom, maptype= "roadmap", destfile = "roadmap") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
cameras <- read.csv("~/Document
s/git/CleaningGettingData/BaltimoreData/cameras.csv")
getwd
getwd()
cameras <- read.csv("~/Documents/git/CleaningGettingData/BaltimoreData/cameras.csv")
mymarkers <- cbind.data.frame(cameras$Latitude, cameras$Longitude)
library(RgoogleMaps)
lat <- c(39.19991302, 39.37049296) #define our map's ylim
lon <- c(-76.53236586, -76.71024274) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
zoom <- 5  #zoom: 1 = furthest out (entire globe), larger numbers = closer in
terrmap <- GetMap(center=center, zoom=zoom, maptype= "roadmap", destfile = "roadmap") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
zoom <- 20  #zoom: 1 = furthest out (entire globe), larger numbers = closer in
cameras <- read.csv("~/Documents/git/CleaningGettingData/BaltimoreData/cameras.csv")
mymarkers <- cbind.data.frame(cameras$Latitude, cameras$Longitude)
library(RgoogleMaps)
lat <- c(39.19991302, 39.37049296) #define our map's ylim
lon <- c(-76.53236586, -76.71024274) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
zoom <- 20  #zoom: 1 = furthest out (entire globe), larger numbers = closer in
terrmap <- GetMap(center=center, zoom=zoom, maptype= "roadmap", destfile = "roadmap") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
cameras <- read.csv("~/Documents/git/CleaningGettingData/BaltimoreData/cameras.csv")
mymarkers <- cbind.data.frame(cameras$Latitude, cameras$Longitude)
library(RgoogleMaps)
lat <- c(39.19991302, 39.37049296) #define our map's ylim
lon <- c(-76.53236586, -76.71024274) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
zoom <- 13  #zoom: 1 = furthest out (entire globe), larger numbers = closer in
terrmap <- GetMap(center=center, zoom=zoom, maptype= "roadmap", destfile = "roadmap") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
setwd("~/Documents/git/ExploringData")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages(c("nlme", "lattice"))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattice
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
library(datasets)
data(airquality)
ibrary(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
